一 搭建开发环境

1.安装python
2.创建文件夹django_project，并进入该文件夹       cd  django_project  
3.配置并进入python虚拟环境     python -m venv env           env\Scripts\activate.bat       
4.安装 Django     pip install  django==2.1      (此处可能需要升级pip工具)
5.创建django项目  django-admin   startproject  myblog
             在django_project下面会多一个文件夹myblog
                                                                              |     db.sqlite3
                                                                              |     manage.py
                                                                              |
                                                                              |_    myblog
                                                                                        |  settings.py
                                                                                        |  urls.py
                                                                                        |  wsgi.py
                                                                                        |  __init__.py
6.运行Django服务器(位于本地)：进入myblog(含有manage.py的文件夹)    python manage.py runserver

二  创建并配置APP
在Django中，一个app代表一个功能模块，所以搭建博客的第一步就是创建一个新的app，用来实现和文章相关的功能,存放相关代码
1.在myblog文件夹里创建一个app,article        python manage.py  startapp article     ,目录如下
	myblog
	│  db.sqlite3
	│  manage.py
	│
	├─article
	│  │  admin.py
	│  │  apps.py
	│  │  models.py
	│  │  tests.py
	│  │  views.py
	│  │  __init__.py
	│  │
	│  └─migrations
	│          __init__.py
	│
	└─myblog
  	 │  settings.py
   	 │  urls.py
   	 │  wsgi.py
   	 └─ __init__.py
2.注册app
打开项目配置文件settings.py，找到INSTALLED_APPS，添加如下代码，告诉“Django”，有这么一个新的APP  "article"
	settings.py/
	INSTALLED_APPS = [
  	 # 其他代码
   	 ...
   	 # 新增'article'代码，激活app
  	  'article',
	]
3.配置app的访问路径（urls）
app的url可以理解为访问该app时所需要的网址，当然要在项目（myblog）的路径配置文件下（urls.py）操作
       	urls.py/
	from django.contrib import admin
	from django.urls import path, include
	# 存放映射关系的列表
	urlpatterns = [
 	  ...
  	  # 新增代码，配置app的url     ‘article/’表示抵达的app路径，'article.urls'表示article的下一级路径
   	 path('article/', include('article.urls', namespace='article')),
	]
在app生成时，并没有urls.py这个文件，因此需要在APP“article”下面创建一个urls.py文件，用于app的路由分发
	article/urls.py
	from django.urls import path
	# 正在部署的应用的名称，Django2.0之后必须要命名
	app_name = 'article'
	urlpatterns = [
   	 # 目前还没有urls
	]
三 编写模型Model
1.Django框架是MTV模式
层次                                                职责
模型Model                                      一个模型 可以理解为一个数据库，负责存取，验证数据有效性，包含存储数据必要的字段与行为
模板Template                                   可以控制页面的显示
视图View                                         存取模型，调用模板，可以理解为模型与模板的桥梁
2.编写models.py
对博客网站而言，最重要的数据就是文章，所以先编写一个存放文章的模型
打开article/models.py，编写如下代码：
额外说明，GET和POST是两种HTTP请求方法，HTTP请求可以为输入网址，提交表单
	article/models.py
	from django.db import models    #导入模型
	from django.contrib.auth.models import User                    #导入用户模型
	from django.utils import timezone                                    #导入时间
	class ArticlePost(models.Model):                                        #定义类，为文章内容创建了一个模板
                                 #在模型中，字段被实例化为类属性并表示特定的表，同时具有将字段值映射到数据库的属性及方法。
    		author = models.ForeignKey(User, on_delete=models.CASCADE)  #多对一，多篇文章一个作者，通过该方法将ArticlePost和User关联在一起
    		title = models.CharField(max_length=100)
   	 	body = models.TextField()                                  #字符较多使用该字段
    		created = models.DateTimeField(default=timezone.now)           #返回创建时间
    		updated = models.DateTimeField(auto_now=True)                    #更新时间
    		class Meta: 
        			ordering = ('-created',)                                        #创建内部类，规范数据的行为，文章按倒序排列
    		def __str__(self):
       			 return self.title                                                       #调用该方法时返回标题
3.数据迁移
迁移是将对模型的更改传递到数据库的方式，因此每当对数据库进行了更改都要进行数据迁移，Django的迁移代码是模型文件自动生成的，
本质上只是一个历史记录，通过迁移可以实现数据库的滚动更新,迁移之后，model就算完成了
进入myblog文件夹，创建迁移表     python manage.py makemigrations
数据迁移        python manage.py migrate     
四编写视图
在Django中，网页都是由视图派生而来的，每一个视图表现为一个python函数，它必须包含两个内容，一是包含被请求页面内容的HttpResponse对象，或者抛出一个异常
比如Http404
1.写一个简单的view函数
	article/views.py
	# 导入 HttpResponse 模块
	from django.http import HttpResponse
	# 视图函数,request表示将一个请求作为该函数的第一个参数
	def article_list(request):
   		 return HttpResponse("Hello World!")
2.配置URLconfs，将用户的URL链接和视图函数关联起来，即URLconfs的作用是将URL映射到视图中
	article/urls.py
	# 从当前文件夹引入views.py（作为一个模块）
	from . import views
	...
	urlpatterns = [
    		# path函数将url映射到视图，name='article_list'给URL起了个名字
   		 path('article-list/', views.article_list, name='article_list'),
	]
这样运行服务器，当有一个请求（输入链接http://127.0.0.1:8000/article/article-list/），就会访问视图函数 article_list，从而返回一个渲染对象

五.网站后台概念
网站后台，又称网站管理后台，用于管理网站的一系列操作，如数据的增加，更新，删除，在项目开发的初期，由于没有真实的用户数据和完整的测试环境
会频繁地使用后台来修改测试数据。Django内置了一个很好的后台管理数据
1.创建管理员账号
管理员superuser是可以进入网站后台对数据进行维护的账号，具有很高的权限，这里我们创建一个管理员账号，以便添加后续的测试数据
创建管理员账号    python manage.py createsuperuser     会提示你输入账号名字，密码，邮箱
2.将ArticlePost注册到后台中，告诉Django有这样一个表要管理
	article/admin.py
	from django.contrib import admin
	# 从当前目录下的models.py文件中导入ArticlerPost
	from .models import ArticlePost
	# 注册ArticlePost到admin中
	admin.site.register(ArticlePost)
3.在后台创建几篇文章
由于Django在项目生成的时候已经配置好了settings和url，所以直接登录后台http://127.0.0.1:8000/admin/创建文章

六改写view视图
在后台创建几篇文章之后，接下来我们试着通过页面来显示这些后台创建的文章
1.改写article/views.py中的视图函数article_list
	article/views.py
	from django.shortcuts import render
	# 导入数据模型ArticlePost
	from .models import ArticlePost
	def article_list(request):
   		 # 取出所有博客文章
   		 articles = ArticlePost.objects.all()
   		 # 需要传递给模板（templates）的对象，将models对象映射到Templates对象
   		 context = { 'articles': articles }
   		 # render函数：参数1request请求照抄，参数2待渲染的模板文件，3保存具体数据的字典参数
                                 #render语句此处的作用是将数据填充进模板文件，然后返回渲染后的页面
    		return render(request, 'article/list.html', context)
七 Templates文件
在上面咱们定义list.html文件位于article目录下，咱们创建如下目录
	myblog
	│  ...
	├─article
	│  ...
	└─myblog
	│  ...
	└─templates
    		└─ article
        		└─ list.html
HTML是创建网页的标记语言，规定了哪些是标题，哪些是内容，即可以理解为网页的排版文件，作为WEB框架，Django通过模板
动态生成html
1.编写list.html
	templates/article/list.html
	#articles为视图函数context传递过来的对象即所有文章的集合，for循环表示依次取出articles里面的元素命名为article，并执行以下操作
	#{% %}在渲染过程中提供任意逻辑
	{% for article in articles %}		
		<p>{{ article.title }}</p>     #P表示段落，{{ }}变量从上下围输出一个值。类似于dict的对象
	{% endfor %}      #表示循环结束
2.找到模板文件
此时在浏览器中输入一个网址“http://127.0.0.1:8000/article/article-list/‘’，即发起一个请求，来访问页面，会出现错误，提示没找到模板文件；
打开myblog/myblog/settings.py,加入以下代码：
	my_blog/settings.py
	TEMPLATES = [             #这是一个列表，每个元素是个字典
   	 	{
      		  ...
       		 # 定义模板位置
      		  'DIRS': [os.path.join(BASE_DIR, 'templates')],
       		 ...
   		 },
	  ]
********************************************************************************************************************************************
                                                                            到此走通了MTV的道路，其他视图页面（文章详情什么的）都是套路
*******************************************************************************************************************************************
八  通过Bootstrap改写模板文件
1.上面的html页面太糙了，没法用，bootstrap是网站开发开源前端框架(前端是最终展示给用户的页面)，它包括字体牌瘾，窗体，按钮，导航及
其他各种组件，我们在根目录创建static/bootstrap/,存放bootstrap静态文件（静态文件指那些不会改变的文件，例如css,js文件），把Bootstrap 4
解压缩得到的CSS,JS两个文件夹复制进去；由于bootstrap.js依赖于jquery.js和popper.js才能正常运行，因此这两个文件我们也要下载保存，现在static
目录如下;
	my_blog
	│
	├─article
	└─my_blog
	│ ...
	└─static
    	   └─bootstrap
    	   │   ├─css # 文件夹
    	   │   └─js # 文件夹
    	   └─jquery
    	   │   └─jquery-3.3.1.js # 文件
    	   └─popper
        	        └─popper-1.14.4.js # 文件
        因为在Django中，需要指定静态文件的位置才能引用，因此需要在settings.py的末尾添加下面语句
	my_blog/settings.py
	...
	STATICFILES_DIRS = (
    		os.path.join(BASE_DIR, "static"),
	)
           确认一下settings.py中有没有STATIC_URL = '/static/'字段，如果没有把它也加在后面。
2.编写模板
在templates中建立三个文件，这三个页面在每个页面中都是不变的，独立出来可以提高维护性
base.html         是整个项目的模板基础，所有的网页都从它继承
header.html     是网页顶部的导航栏
footer.html      是网页底部的注脚
*******************************************************************************************************
templates/base.html
<!-- 载入静态文件 -->
{% load staticfiles %}
<!DOCTYPE html>
<!-- 网站主语言 -->
<html lang="zh-cn">
<head>
    <!-- 网站采用的字符编码 -->
    <meta charset="utf-8">
    <!-- 预留网站标题的位置 -->
    <title>{% block title %}{% endblock %}</title>
    <!-- 引入bootstrap的css文件 -->
    <link rel="stylesheet" href="{% static 'bootstrap/css/bootstrap.min.css' %}">
</head>
<body>
    <!-- 引入导航栏 -->
    {% include 'header.html' %}
    <!-- 预留具体页面的位置 -->
    {% block content %}{% endblock content %}
    <!-- 引入注脚 -->
    {% include 'footer.html' %}
    <!-- bootstrap.js 依赖 jquery.js 和popper.js，因此在这里引入 -->
    <script src="{% static 'jquery/jquery-3.3.1.js' %}"></script>
    <script src="{% static 'popper/popper-1.14.4.js' %}"></script>    
    <!-- 引入bootstrap的js文件 -->
    <script src="{% static 'bootstrap/js/bootstrap.min.js' %}"></script>
</body>
</html>
*******************************************************************************************
templates/header.html
<!-- 定义导航栏 -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container">
    <!-- 导航栏商标 -->
    <a class="navbar-brand" href="#">我的博客</a>
    <!-- 导航入口 -->
    <div>
      <ul class="navbar-nav">
        <!-- 条目 -->
        <li class="nav-item">
          <a class="nav-link" href="#">文章</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
************************************************************************************************************
templates/footer.html
{% load staticfiles %}
<!-- Footer -->
<div>
    <br><br><br>
</div>
<footer class="py-3 bg-dark fixed-bottom">
    <div class="container">
        <p class="m-0 text-center text-white">Copyright &copy; www.dusaiphoto.com 2018</p>
    </div>
</footer>
***********************************************************************************************************
改写 templates/article/list.html
<!-- extends表明此页面继承自 base.html 文件 -->
{% extends "base.html" %}
{% load staticfiles %}
<!-- 写入 base.html 中定义的 title -->
{% block title %}
    首页
{% endblock title %}
<!-- 写入 base.html 中定义的 content -->
{% block content %}
<!-- 定义放置文章标题的div容器 -->
<div class="container">
    <div class="row mt-2">
        {% for article in articles %}
        <!-- 文章内容 -->
        <div class="col-4 mb-4">
        <!-- 卡片容器 -->
            <div class="card h-100">
                <!-- 标题 -->
                <h4 class="card-header">{{ article.title }}</h4>
                <!-- 摘要 -->
                <div class="card-body">
                    <p class="card-text">{{ article.body|slice:'100' }}...</p>
                </div>
                <!-- 注脚 -->
                <div class="card-footer">
                    <a href="#" class="btn btn-primary">阅读本文</a>
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock content %}
*****************************************************************************************************
注：由于html的编写是一块很大的内容，此处不做详述，有必要去官网学习相关语法
       https://getbootstrap.com/docs/4.1/getting-started/introduction/

3.基于上述三个模板文件编写相应的具体的html文件

九 引入MARKDOWN
    Markdown是一种轻量级的标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的或者HTML文档
1.进入虚拟环境，安装markdown
       pip install markdown
2.使用markdown
 为了将Markdown语法书写的文章渲染为HTML文本，更改article/views.py中的视图函数，例如article_detail
	article/views.py
	...
	# 引入markdown模块
	import markdown
	def article_detail(request, id):
    		article = ArticlePost.objects.get(id=id)       #取出某篇文章
    		# 将markdown语法渲染成html样式
    		article.body = markdown.markdown(article.body,
       			 extensions=[
       			 # 包含 缩写、表格等常用扩展
       			 'markdown.extensions.extra',
        			# 语法高亮扩展
        			'markdown.extensions.codehilite',
       			 ])
    		context = { 'article': article }
   	                return render(request, 'article/detail.html', context)
然后修改templates/article/detail.html中有关正文的部分
	templates/article/detail.html
	...
	# 在 article.body 后加上 |safe 过滤器
	<p>{{ article.body|safe }}</p>
Django出于安全的考虑，会将输出的HTML代码进行转义，这使得article.body中渲染的HTML文本无法正常显示。
管道符|是Django中过滤器的写法，而|safe就类似给article.body贴了一个标签，表示这一段字符不需要进行转义了

说明：使用DJango搭建一个博客,最重要的就是搞明白MTV的相互调用关系，这个懂了之后，其余就是一点点丰富优化的操作，需要不断地学习